import { useState, useEffect } from 'react';
import { useThemeUI } from '@theme-ui/core';
import { defaultBreakpoints } from '@theme-ui/css';

var useBreakpointIndex = function useBreakpointIndex(options) {
  if (options === void 0) {
    options = {};
  }

  var context = useThemeUI();
  var _options = options,
      _options$defaultIndex = _options.defaultIndex,
      defaultIndex = _options$defaultIndex === void 0 ? 0 : _options$defaultIndex;
  var breakpoints = context.theme && context.theme.breakpoints || defaultBreakpoints;

  if (typeof defaultIndex !== 'number') {
    throw new TypeError("Default breakpoint index should be a number. Got: " + defaultIndex + ", " + typeof defaultIndex);
  } else if (defaultIndex < 0 || defaultIndex > breakpoints.length - 1) {
    throw new RangeError("Default breakpoint index out of range. Theme has " + breakpoints.length + " breakpoints, got index " + defaultIndex);
  }

  var _useState = useState(defaultIndex),
      value = _useState[0],
      setValue = _useState[1];

  useEffect(function () {
    var getIndex = function getIndex() {
      return breakpoints.filter(function (bp) {
        var query = bp.includes('@media') ? bp.replace('@media ', '') : "screen and (min-width: " + bp + ")";
        return window.matchMedia(query).matches;
      }).length;
    };

    var onResize = function onResize() {
      var newValue = getIndex();

      if (value !== newValue) {
        setValue(newValue);
      }
    };

    onResize();
    window.addEventListener('resize', onResize);
    return function () {
      return window.removeEventListener('resize', onResize);
    };
  }, [breakpoints, value]);
  return value;
};
function useResponsiveValue(values, options) {
  if (options === void 0) {
    options = {};
  }

  var _useThemeUI = useThemeUI(),
      theme = _useThemeUI.theme;

  var array = typeof values === 'function' ? values(theme) : values;
  var index = useBreakpointIndex(options);
  return array[index >= array.length ? array.length - 1 : index];
}

export { useBreakpointIndex, useResponsiveValue };
